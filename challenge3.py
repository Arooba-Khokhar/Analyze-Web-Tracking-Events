# -*- coding: utf-8 -*-
"""Challenge3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1a7ZRcFOj3i8bTmKaWGh5D_Vsg4Q8YNoQ
"""

from google.colab import drive
drive.mount("/content/drive", force_remount=True)





def read_buffer_sequence(file_path):
    with open(file_path, 'r') as file:
        chunks = []
        current_chunk = []
        for line in file:
            line = line.strip()
            if line:
                current_chunk.append(int(line))
            else:
                if current_chunk:
                    chunks.append(current_chunk)
                    current_chunk = []
        if current_chunk:
            chunks.append(current_chunk)
    return chunks

def largest_chunk_size(chunks):
    if not chunks:
        return 0
    return max(sum(chunk) for chunk in chunks)

def largest_three_chunks_combined_size(chunks):
    sorted_chunks = sorted(chunks, key=lambda chunk: sum(chunk), reverse=True)
    largest_three_chunks = sorted_chunks[:3]
    return sum(sum(chunk) for chunk in largest_three_chunks)

if __name__ == '__main__':
    file_path = '/content/drive/MyDrive/Task/buffer_sequence.txt'
    chunks = read_buffer_sequence(file_path)

    largest_chunk = largest_chunk_size(chunks)
    largest_three_combined = largest_three_chunks_combined_size(chunks)

    print("The largest chunk size is:", largest_chunk)
    print("The size of the largest three chunks combined is:", largest_three_combined)





import unittest
def test_largest_chunk_size():
    input_file = '/content/drive/MyDrive/Task/buffer_sequence.txt'
    result = largest_chunk_size(input_file)
    expected_result = ({
       'Largest_chunk'== 10 ,
        'largest_three_combined'== 39000

    })


    assert result.equals(expected_result), "Test failed!"

if __name__ == "__main__":
    input_file = '/content/drive/MyDrive/Task/buffer_sequence.txt'
    #largest_chunk  = largest_chunk_size(input_file)
    #largest_three_combined  = largest_three_combined(input_file)
    print("largest_chunk :", largest_chunk)
    print("largest_three_combined :", largest_three_combined)



